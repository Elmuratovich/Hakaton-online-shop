@model Project.Models.ViewModel.AddProductViewModel
@{
    Layout = null;
}


<div class="form-group">
    <div class="form-group">
        <label for="email1">Название</label>
        <input type="text" asp-for="Product.name" class="form-control" aria-describedby="emailHelp" placeholder="Enter name">
        <small id="emailHelp" class="form-text text-muted">Your information is safe with us.</small>
    </div>
    <div class="form-group">
        <label for="email1">Описание</label>
        <input type="text" asp-for="Product.description" class="form-control" aria-describedby="emailHelp" placeholder="Enter name">
        <small id="Help" class="form-text text-muted">Your information is safe with us.</small>
    </div>
    <div class="form-group">
        <label for="password1">Цена</label>
        <input asp-for="Product.price" class="form-control">
    </div>
    <div class="form-group">
        <label for="password1">Количество</label>
        <input asp-for="Product.stock" class="form-control">
    </div>
    <!-- Upload Area -->
    <div class="form-group">
        <label asp-for="Photo" class="control-label">Фото</label>
        <div class="drop-zone">
            <span class="drop-zone__prompt">Drop file here or click to upload</span>
            <input asp-for="Photo" class="drop-zone__input" accept="image/*">
        </div>
    </div>
    <!-- End Upload Area -->
    <div class="form-group">
        <label for="password1">Категория</label>
        <select asp-for="Product.category">
            @for (int i = 0; i < Model.Categories.Count; i++)
            {
                <option value="@Model.Categories[i].id">@Model.Categories[i].name</option>
            }
        </select>
    </div>
</div>

<style>
    .drop-zone {
        max-width: 100%;
        height: 200px;
        padding: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        font-family: "Quicksand", sans-serif;
        font-weight: 500;
        font-size: 20px;
        cursor: pointer;
        color: #cccccc;
        border: 4px dashed #009578;
        border-radius: 10px;
    }

    .drop-zone--over {
        border-style: solid;
    }

    .drop-zone__input {
        display: none;
    }

    .drop-zone__thumb {
        width: 200px;
        height: 100%;
        border-radius: 10px;
        overflow: hidden;
        background-color: #cccccc;
        background-size: cover;
        position: relative;
    }


        .drop-zone__thumb::after {
            content: attr(data-label);
            position: absolute;
            bottom: 0;
            left: 0;
            width: 200px;
            padding: 5px 0;
            color: #ffffff;
            background: rgba(0, 0, 0, 0.75);
            font-size: 14px;
            text-align: center;
        }
</style>

<script>

    document.querySelectorAll(".drop-zone__input").forEach((inputElement) => {
        const dropZoneElement = inputElement.closest(".drop-zone");

        dropZoneElement.addEventListener("click", (e) => {
            inputElement.click();
        });

        inputElement.addEventListener("change", (e) => {
            if (inputElement.files.length) {
                updateThumbnail(dropZoneElement, inputElement.files[0]);
            }
        });

        dropZoneElement.addEventListener("dragover", (e) => {
            e.preventDefault();
            dropZoneElement.classList.add("drop-zone--over");
        });

        ["dragleave", "dragend"].forEach((type) => {
            dropZoneElement.addEventListener(type, (e) => {
                dropZoneElement.classList.remove("drop-zone--over");
            });
        });

        dropZoneElement.addEventListener("drop", (e) => {
            e.preventDefault();

            if (e.dataTransfer.files.length) {
                inputElement.files = e.dataTransfer.files;
                updateThumbnail(dropZoneElement, e.dataTransfer.files[0]);
            }

            dropZoneElement.classList.remove("drop-zone--over");
        });
    });

    function updateThumbnail(dropZoneElement, file) {
        let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");

        // First time - remove the prompt
        if (dropZoneElement.querySelector(".drop-zone__prompt")) {
            dropZoneElement.querySelector(".drop-zone__prompt").remove();
        }

        // First time - there is no thumbnail element, so lets create it
        if (!thumbnailElement) {
            thumbnailElement = document.createElement("div");
            thumbnailElement.classList.add("drop-zone__thumb");
            dropZoneElement.appendChild(thumbnailElement);
        }

        thumbnailElement.dataset.label = file.name;

        // Show thumbnail for image files
        if (file.type.startsWith("image/")) {
            const reader = new FileReader();

            reader.readAsDataURL(file);
            reader.onload = () => {
                thumbnailElement.style.backgroundImage = `url('${reader.result}')`;
            };
        } else {
            thumbnailElement.style.backgroundImage = null;
        }
    }
</script>